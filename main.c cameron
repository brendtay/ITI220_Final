#include <msp430.h> 
#include <stdbool.h>
#include <stdio.h>

// Defines LEDs
// (Name = Player Number + Spot (1-9) number)

// Player 1 (Pin 1.1 - 1.7 & Pin 2.0 - 2.1)
// Pin 1
#define P1S1 BIT1
#define P1S2 BIT2
#define P1S3 BIT3
#define P1S4 BIT4
#define P1S5 BIT5
#define P1S6 BIT6
#define P1S7 BIT7
// Pin 2
#define P1S8 BIT0
#define P1S9 BIT1

// Player 2 (Pin 6.0 - 6.4 & Pin 4.0, 4.4, 4.6, 4.7)
// Pin 6
#define P2S1 BIT0
#define P2S2 BIT1
#define P2S3 BIT2
#define P2S4 BIT3
#define P2S5 BIT4
// Pin 4
#define P2S6 BIT0
#define P2S7 BIT4
#define P2S8 BIT6
#define P2S9 BIT7

// Player 1 LED setup
// Sets output for p1 bit 1-7
#define SETP1(a, b, c ,d ,e ,f, h) (P1DIR |= ((a) | (b) | (c)| (d) | (e) | (f) | (h)))
// Sets output for p2 bit 8-9
#define SETP2(a, b) (P2DIR |= ((a) | (b)))

// Player 2 LED setup
// Sets output for pin 6 bit 1-5
#define SETP6(a, b, c, d, e) (P6DIR |= ((a) | (b) | (c) | (d) | (e)))
// Sets output for pin 4 bit 6-9
#define SETP4(a, b, c, d) (P4DIR |= ((a) | (b) | (c) | (d)))

// Player LED on macros
// Player 1
#define ONP1(x) (P1OUT |= (x))
#define ONP2(x) (P2OUT |= (x))
// Player 2
#define ONP4(x) (P4OUT |= (x))
#define ONP6(x) (P6OUT |= (x))

// Player LED toggle macros
// Player 1
#define TOGGLEP1(x) (P1OUT ^= (x))
#define TOGGLEP2(x) (P2OUT ^= (x))
// Player 2
#define TOGGLEP4(x) (P4OUT ^= (x))
#define TOGGLEP6(x) (P6OUT ^= (x))

// Player LED off macros
// Player 1
#define OFFP1(x) (P1OUT &= ~(x))
#define OFFP2(x) (P2OUT &= ~(x))
// Player 2
#define OFFP4(x) (P4OUT &= ~(x))
#define OFFP6(x) (P6OUT &= ~(x))


void setup();
void allOff();
void checkWin();
void delay(volatile unsigned int duration);
void onPlayerLED(volatile unsigned int p1pos, volatile unsigned int p2pos, volatile int player);
void offPlayerLED(volatile unsigned int p1pos, volatile unsigned int p2pos, volatile int player);
void togglePlayerLED(volatile unsigned int p1pos, volatile unsigned int p2pos, volatile int player, volatile unsigned int duration);


volatile unsigned int p1pos = 0;
volatile unsigned int p2pos = 0;

bool confirm = false;

bool gameOver = false;
bool p1win = false;
bool p2win = false;
bool tie = false;

int p1state[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int p2state[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

const char p1led[9] = {P1S1, P1S2, P1S3, P1S4, P1S5, P1S6, P1S7, P1S8, P1S9};
const char p2led[9] = {P2S1, P2S2, P2S3, P2S4, P2S5, P2S6, P2S7, P2S8, P2S9};

volatile int player = 1;

int main(void)
{

    volatile unsigned int i;

    WDTCTL = WDTPW | WDTHOLD;                                                       // stop watchdog timer

    __enable_interrupt();

    setup();

    while (1){

        if (gameOver){
            if (p1win){
                for (i = 0; i < 9; i++){                                            // disable all p2 leds
                    offPlayerLED(0, i, 2);

                    if (p1state[i] == 1)
                        togglePlayerLED(i, 0, 1, 5000);                            // blink all active p1 leds
                }
            }

            if (p2win){
                for (i = 0; i < 9; i++){                                            // disable all p1 leds
                    offPlayerLED(i, 0, 1);

                    if (p2state[i] == 1)
                        togglePlayerLED(0, i, 2, 5000);                             // blink all active p2 leds
                }
            }

            if (tie){
                for (i = 0; i < 9; i++){                                            // blink all active p2 leds
                    if (p2state[i] == 1)
                        togglePlayerLED(0, i, 2, 5000);

                    if (p1state[i] == 1)
                        togglePlayerLED(i, 0, 1, 5000);                             // blink all active p1 leds
                }
            }
        }

        if (!(P3IN && BIT1) && !(P3IN && BIT2) && !(P3IN && BIT4) && !(P3IN && BIT5)){  // both players hold increment & decrement buttons to reset game
            allOff();
            for (i = 0; i < 9; i++){
                p1state[i] = 0;
                p2state[i] = 0;
            }
            player = 1;
            p1pos = 0;
            p2pos = 0;
            gameOver = false;
            p1win = false;
            p2win = false;
            TB0CTL |= TBIE;                                                         // re-enable timer interrupt
        }

        if (!gameOver && player == 1){                                              // player 1 turn
            // disable button interrupts for player 2
            P3IE &= ~BIT4;
            P3IE &= ~BIT5;
            P3IE &= ~BIT6;

            // enable button interrupts for player 1
            P3IE |= BIT1;
            P3IE |= BIT2;
            P3IE |= BIT7;

            if(p1pos >= 9)                                                           // player 1 led pos logic
                p1pos = 0;

            for (i = 0; i < 9; i++){                                                // verify light state (sometimes LEDs would get stuck on from button interrupts)
                if (p1state[i] == 0)
                    offPlayerLED(i, 0, 1);

                if (p1state[i] == 1)
                    onPlayerLED(i, 0, 1);
            }

            if (p2state[p1pos] == 0 && p1state[p1pos] == 0)                        // blink if neither player light is on
                togglePlayerLED(p1pos, p2pos, player, 20000);


            if (p1state[p1pos] == 1 || p2state[p1pos] == 1){                         // increment pos if place is taken
                p1pos = p1pos + 1;
                if (p1pos >= 9)
                    p1pos = 0;
            }
        }

        else if (!gameOver && player == 2){                                         // player 2 turn
            // disable button interrupts for player 1
            P3IE &= ~BIT1;
            P3IE &= ~BIT2;
            P3IE &= ~BIT7;

            // enable button interrupts for player 2
            P3IE |= BIT4;
            P3IE |= BIT5;
            P3IE |= BIT6;

            if(p2pos >= 9)                                                          // player 2 led pos logic
                p2pos = 0;

            for (i = 0; i < 9; i++){                                                // verify light state
                if (p2state[i] == 0)
                    offPlayerLED(0, i, 2);

                if (p2state[i] == 1)
                    onPlayerLED(0, i, 2);
            }

            if (p2state[p2pos] == 0 && p1state[p2pos] == 0)                         // blink if neither player light is on
                togglePlayerLED(p1pos, p2pos, player, 20000);


            if (p1state[p2pos] == 1 || p2state[p2pos] == 1){                        // increment pos if place is taken
                p2pos = p2pos + 1;
                if (p2pos >= 9)
                    p2pos = 0;
            }
        }

        if (!gameOver && confirm == true){                                          // if confirm button is pressed
            if (player == 1){                                                       // ... on player 1's turn
                p1state[p1pos] = 1;

                onPlayerLED(p1pos, p2pos, 1);

                p2pos = 0;                                                          // reset player 2 pos
                player = 2;                                                         // change players
            }

            else if (player == 2){                                                  // ... on player 2's turn
                p2state[p2pos] = 1;

                onPlayerLED(p1pos, p2pos, 2);

                p1pos = 0;                                                          // reset player 1 pos
                player = 1;                                                         // change players
            }

            confirm = false;
        }
    }
}

void setup(){

    PM5CTL0 &= ~LOCKLPM5;

    // Set outputs
    SETP1(P1S1, P1S2, P1S3, P1S4, P1S5, P1S6, P1S7);
    SETP2(P1S8, P1S9);

    SETP6(P2S1, P2S2, P2S3, P2S4, P2S5);
    SETP4(P2S6, P2S7, P2S8, P2S9);


    // Button Pin 3.1 P1 increment
    P3DIR |= ~BIT1;
    P3OUT |= BIT1;
    P3IES |= BIT1;
    P3IFG &= ~BIT1;
    P3IE |= BIT1;

    // Button Pin 3.2 P1 decrement
    P3DIR |= ~BIT2;
    P3OUT |= BIT2;
    P3IES |= BIT2;
    P3IFG &= ~BIT2;
    P3IE |= BIT2;

    // Button Pin 3.7 P1 confirm
    P3DIR |= ~BIT7;
    P3OUT |= BIT7;
    P3IES |= BIT7;
    P3IFG &= ~BIT7;
    P3IE |= BIT7;

    // Button Pin 3.4 P2 decrement
    P3DIR |= ~BIT4;
    P3OUT |= BIT4;
    P3IES |= BIT4;
    P3IFG &= ~BIT4;
    P3IE |= BIT4;

    // Button Pin 3.5 P2 increment
    P3DIR |= ~BIT5;
    P3OUT |= BIT5;
    P3IES |= BIT5;
    P3IFG &= ~BIT5;
    P3IE |= BIT5;

    // Button Pin 3.6 P2 confirm
    P3DIR |= ~BIT6;
    P3OUT |= BIT6;
    P3IES |= BIT6;
    P3IFG &= ~BIT6;
    P3IE |= BIT6;


    // Setup Timer0_B   (this was fun, thanks msp430fr2355.h)
    TB0CTL = TBSSEL_1 | CNTL_1 | MC_2 | ID_3 | TBCLR | TBIE;

    /*
        Timer B = ACLK (32khz) | Count (0FFFh) | Continuous mode | Divider (8) | Clear Timer Value | Interrupt Enable (might need to move this later to when the game starts)
        MATH!!!!
        ACLK (32khz) = 32768 | Count (0FFFh) = 4096 | Divider = 8
        Count / (ACLK / Divider)
        4096 / (32768 / 8)
        4096 / 4096 = 1 second ??? it works so i'm not going to mess with it ever again
    */

    allOff();
}

void allOff(){
    //Player 1
    OFFP1(P1S1);
    OFFP1(P1S2);
    OFFP1(P1S3);
    OFFP1(P1S4);
    OFFP1(P1S5);
    OFFP1(P1S6);
    OFFP1(P1S7);
    OFFP2(P1S8);
    OFFP2(P1S9);

    //Player 2
    OFFP6(P2S1);
    OFFP6(P2S2);
    OFFP6(P2S3);
    OFFP6(P2S4);
    OFFP6(P2S5);
    OFFP4(P2S6);
    OFFP4(P2S7);
    OFFP4(P2S8);
    OFFP4(P2S9);
}

void delay(volatile unsigned int duration){
    while (duration != 0)
        duration--;
}

void onPlayerLED(volatile unsigned int p1pos, volatile unsigned int p2pos, volatile int player){
    if (player == 1){
        if (p1pos <= 6)
            ONP1(p1led[p1pos]);                                             // change state of p1 led
        else if (p1pos >= 7 && p1pos <= 8)
            ONP2(p1led[p1pos]);
    }
    if (player == 2){
        if (p2pos <= 4)
            ONP6(p2led[p2pos]);                                             // change state of p2 led
        else if (p2pos >= 5 && p2pos <= 8)
            ONP4(p2led[p2pos]);
    }
}

void offPlayerLED(volatile unsigned int p1pos, volatile unsigned int p2pos, volatile int player){
    if (player == 1){
        if (p1pos <= 6)
            OFFP1(p1led[p1pos]);                                             // change state of p1 led
        else if (p1pos >= 7 && p1pos <= 8)
            OFFP2(p1led[p1pos]);
    }
    if (player == 2){
        if (p2pos <= 4)
            OFFP6(p2led[p2pos]);                                             // change state of p2 led
        else if (p2pos >= 5 && p2pos <= 8)
            OFFP4(p2led[p2pos]);
    }
}

void togglePlayerLED(volatile unsigned int p1pos, volatile unsigned int p2pos, volatile int player, volatile unsigned int duration){
    delay(duration);

    if (player == 1){
        if (p1pos <= 6)
            TOGGLEP1(p1led[p1pos]);                                          // change state of p1 led
        else if (p1pos >= 7 && p1pos <= 8)
            TOGGLEP2(p1led[p1pos]);
    }
    if (player == 2){
        if (p2pos <= 4)
            TOGGLEP6(p2led[p2pos]);                                          // change state of p2 led
        else if (p2pos >= 5 && p2pos <= 8)
            TOGGLEP4(p2led[p2pos]);
    }

    delay(duration);
}


// Pin 3 button interrupts bit 1-6
#pragma vector = PORT3_VECTOR;
__interrupt void P3_ISR(void){
    if (P3IFG & BIT1){
        P3IE &= ~BIT1;                                                       // disable interrupt to prevent multiple input (kind of works)
        p1pos = p1pos + 1;
        P3IFG &= ~BIT1;
    }
    if (P3IFG & BIT2){
        P3IE &= ~BIT2;
        p1pos = p1pos - 1;
        P3IFG &= ~BIT2;
    }
    if (P3IFG & BIT7){
        P3IE &= ~BIT7;
        if (p1state[p1pos] == 0 && p2state[p1pos] == 0)                      // only allow player to confirm if spot is not taken (fail safe)
            confirm = true;
        P3IFG &= ~BIT7;
    }
    if (P3IFG & BIT4){
        P3IE &= ~BIT4;
        p2pos = p2pos - 1;
        P3IFG &= ~BIT4;
    }
    if (P3IFG & BIT5){
        P3IE &= ~BIT5;
        p2pos = p2pos + 1;
        P3IFG &= ~BIT5;
    }
    if (P3IFG & BIT6){
        P3IE &= ~BIT6;
        if (p1state[p2pos] == 0 && p2state[p2pos] == 0)                     // only allow player to confirm if spot is not taken (fail safe)
            confirm = true;
        P3IFG &= ~BIT6;
    }

}

// Timer0_B interrupt      INTERRUPTS DO NOT LIKE FUNCTIONS!!!
#pragma vector = TIMER0_B1_VECTOR
__interrupt void ISR_TB0_OVERFLOW(void){

    volatile unsigned int total = 0;
    volatile unsigned int i;

    // player 1 win conditions
    if (((p1state[0] + p1state[1] + p1state[2]) == 3) ||
        ((p1state[3] + p1state[4] + p1state[5]) == 3) ||
        ((p1state[6] + p1state[7] + p1state[8]) == 3))        // horizontal conditions
        p1win = true;

    if (((p1state[0] + p1state[3] + p1state[6]) == 3) ||
        ((p1state[1] + p1state[4] + p1state[7]) == 3) ||
        ((p1state[2] + p1state[5] + p1state[8]) == 3))        // vertical conditions
        p1win = true;

    if (((p1state[0] + p1state[4] + p1state[8]) == 3) ||
        ((p1state[2] + p1state[4] + p1state[6]) == 3))        // diagonal conditions
        p1win = true;

    // player 2 win conditions
    if (((p2state[0] + p2state[1] + p2state[2]) == 3) ||
        ((p2state[3] + p2state[4] + p2state[5]) == 3) ||
        ((p2state[6] + p2state[7] + p2state[8]) == 3))        // horizontal conditions
        p2win = true;

    if (((p2state[0] + p2state[3] + p2state[6]) == 3) ||
        ((p2state[1] + p2state[4] + p2state[7]) == 3) ||
        ((p2state[2] + p2state[5] + p2state[8]) == 3))        // vertical conditions
        p2win = true;

    if (((p2state[0] + p2state[4] + p2state[8]) == 3) ||
        ((p2state[2] + p2state[4] + p2state[6]) == 3))        // diagonal conditions
        p2win = true;


    // tie condition
    for (i = 0; i < 9; i++){                                                 // check total number of leds that are on
        if (p1state[i] == 1 || p2state[i] == 1)
            total = total + 1;
    }

    if (total == 9 && !p1win && !p2win)                                      // if 9 total led are on, tie
        tie = true;

    if (tie || p1win || p2win){
        gameOver = true;
        TB0CTL &= ~TBIE;                                                     // disable timer interrupt to prevent infinite interrupt loop for the win condition
    }


   TB0CTL &= ~TBIFG;                                                         // CLEAR IRQ FLAG
}
